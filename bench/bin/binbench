#! /bin/bash

set -xu

if [ $# -eq 0 ]; then
    echo "No arguments supplied."
    echo "This script needs the type of benchmark [ycsb|tpcc]."
    echo "For example: ./bench/bin/exec_benchbase ycsb"
  exit 1
fi

ESC=$(printf '\033[')
message () {
 printf "${ESC}1m%s${ESC}m\n" "$1"
}

cd "$(dirname "$0")"
base_path=$(pwd)/../..
cd $base_path/third_party/benchbase

benchmark=$1

### Install and Build
zip_file=target/benchbase-mysql.zip
if [ ! -f "$zip_file" ]; then
  message " It seems to be the first-time execution of this script. Clean & Build the mvn package..."

  ### Install JDK-17
  JAVA_HOME=$(/usr/libexec/java_home -v 17)
  if  [[ ${JAVA_HOME} != *"17"* ]]; then
    message '    JDK-17 is not found. Start installing...'
    if [ "$(uname)" == "Darwin" ]; then
      brew install openjdk@17
      export PATH=$(brew --prefix openjdk@17)/bin:$PATH
      sudo ln -sfn $(brew --prefix openjdk@17)/libexec/openjdk.jdk /Library/Java/JavaVirtualMachines/openjdk-17.jdk
    else
      sudo apt install openjdk-17-jdk
    fi
    export JAVA_HOME=$(/usr/libexec/java_home -v 17)
  fi

  ### Build JAR
  ./mvnw clean package -P mysql -e -DskipTests
  unzip $zip_file
  cd -
fi

function EDIT_FENCE()
{
local IS_FENCING=$1
cd $base_path
sed -i "s/#define FENCE.*/#define FENCE $IS_FENCING/" ha_lineairdb.cc
cd $base_path/$build_dir
ninja lineairdb_storage_engine -j `nproc`
cd $base_path/third_party/benchbase
}

### Benchmark
message "Execute the benchmarking $benchmark"
ex_file=benchbase-mysql/benchbase.jar

step=8
num_threads=(1 $(seq $step $step `nproc`))
engines=(
  myisam
  blackhole 
  lineairdb
  innodb 
  #fence
)
build_dir=build
cnf=my.cnf

sudo systemctl stop mysql.service
if [[ `$base_path/$build_dir/bin/mysql -uroot -N -e "SHOW ENGINES;" | grep LINEAIRDB` != LINEAIRDB* ]] ; 
then $base_path/$build_dir/bin/mysql -uroot -N -e "INSTALL PLUGIN lineairdb SONAME 'ha_lineairdb_storage_engine.so';"; 
fi
rm -rf $base_path/bench/results/*

for bm_type in A B C E F write; do
  cd $base_path/third_party/benchbase

  if [ $bm_type = A ]; then
    weight=50,0,0,50,0,0
  elif [ $bm_type = B ]; then
    weight=95,0,0,5,0,0
  elif [ $bm_type = C ]; then
    weight=100,0,0,0,0,0
  elif [ $bm_type = E ]; then
    weight=0,5,95,0,0,0
  elif [ $bm_type = F ]; then
    weight=50,0,0,0,0,50
  else
    weight=0,0,0,100,0,0
  fi

  MYSQL_UP=$(pgrep mysql | wc -l);
  rm -rf $base_path/bench/results/*
  sed -i "s/<weights>.*<\/weights>/<weights>$weight<\/weights>/" $base_path/bench/config/ycsb.xml
  EDIT_FENCE false
  for i in 1; do
    for engine in ${engines[@]}; do
      if [ $engine = "fence" ]; then
        EDIT_FENCE true
        sed -i s/default_storage_engine.*/default_storage_engine=lineairdb/ $base_path/$cnf
      else
        sed -i s/default_storage_engine.*/default_storage_engine=$engine/ $base_path/$cnf
      fi

      if [ "$MYSQL_UP" -ne 0 ]; then
      kill -9 `pgrep mysqld`
      fi
      $base_path/$build_dir/bin/mysqld --defaults-file=$base_path/$cnf --daemonize
      for num_thread in ${num_threads[@]}; do
        sed -i "s/innodb_thread_concurrency.*/innodb_thread_concurrency=$num_thread/" $base_path/$cnf
        sed -i "s/<terminals>.*<\/terminals>/<terminals>$num_thread<\/terminals>/" $base_path/bench/config/ycsb.xml
        $base_path/$build_dir/bin/mysql -uroot < $base_path/bench/reset.sql

        java -jar $ex_file -b $benchmark -c $base_path/bench/config/$benchmark.xml --create=true --load=true --execute=true

        mkdir -p $base_path/bench/results/$engine/thread_$num_thread
        mv results/*.csv $base_path/bench/results/$engine/thread_$num_thread
      done

    done
  done
  mkdir -p $base_path/bench/plots/ycsb/$bm_type
  cd $base_path/bench/plots/ycsb/$bm_type
  python3 $base_path/bench/bin/plot.py --engine ${engines[@]} --xaxis ${num_threads[@]} --fname month_day
done
message 'Finish the benchmarking'
